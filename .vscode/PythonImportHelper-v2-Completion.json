[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getcwd",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "wikipedia",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wikipedia",
        "description": "wikipedia",
        "detail": "wikipedia",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "eel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "eel",
        "description": "eel",
        "detail": "eel",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 2,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "def Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:\n    return None\nprompt_general_instuctions = f\"\"\"\nYou are Jarvis, an AI model that has been created for the convenience of the user by Arnav Singh (https://github.com/Arnav3241) and Avi Sinha (https://github.com/Avi0981). ",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "addHistory",
        "kind": 2,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "def addHistory(index, input_, output_):\n  if __name__ == \"__main__\": time.sleep(1) \n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  #print(type(json_obj[str(index)][\"history\"]))\n  while len(json_obj[str(index)][\"history\"]) >= MAX_HIST:\n    json_obj[str(index)][\"history\"].pop(0)\n  json_obj[str(index)][\"history\"].append({\"input\": str(input_), \"output\": str(output_)})\n  with open('Database//History//history.json', 'w') as f:\n    json_str = json.dumps(json_obj)",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "updateName",
        "kind": 2,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "def updateName(index, name):\n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  json_obj[str(index)][\"name\"] = str(name)\n  json_str = json.dumps(json_obj)\n  with open('Database//History//history.json', 'w') as f:\n    f.write(json_str)\ndef Response(input):  \n  input = input.lower()\n  # global Cache",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 2,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "def Response(input):  \n  input = input.lower()\n  # global Cache\n  # if os.path.exists(file):\n  #   with open(file, 'r') as fData: \n  #     Cache = json.load(fData)\n  #     if Cache == \"\": Cache = {}\n  # else: Cache = []\n  # for element in Cache:\n  #   if element[\"input\"] == input:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "Cache",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "Cache = []\nfile = r\"Cache/Cache.json\"\n#filter python code for gpt responce\ndef Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "file = r\"Cache/Cache.json\"\n#filter python code for gpt responce\ndef Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:\n    return None",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "prompt_general_instuctions",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "prompt_general_instuctions = f\"\"\"\nYou are Jarvis, an AI model that has been created for the convenience of the user by Arnav Singh (https://github.com/Arnav3241) and Avi Sinha (https://github.com/Avi0981). \nYour job is to act as the brain of AI and perform various tasks which will be instructed how to do so later below.\nYou can respond only in the form of code. No text is allowed.\nOnly Python Language is allowed. Only a single piece of code is allowed which can be ran by pasting it in a python file.\nNOTE: If you want to say something to te user, you can not use the print() function. Instead you need to use the use the Speak function. It can be used directly by entering text into it. It;s syntax is given below:\nSpeak(\"Hello, I am Jarvis. How can I help you?\")\nNOTE: If there are multiple taskes given at once by the user and one of the tasks requires a query from the user, then ask it at the end after complting the other queries. If you have queries regarding multple commands just say it at the end in brief that wat all info do you need for the next time.\nNOTE: For Educational Conversations, explain concepts clearly and thoroughly. Use simple language and offer additional help if needed. Make sure to give examples.\nNOTE: In case of creative conversations, be imaginative and engaging. Use descriptive language and encourage user participation.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "prompt_capabilities",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "prompt_capabilities = f\"\"\"\nThese are the functions you can use in the code:\n1. Google Search: You can use the predefined function \"googleSearch()\" to search for anything on Google. The function takes a string as input and returns the search results.\nTakes a string as input and returns the search results.\nFormat:\n```python\na = googleSearch(\"What is the capital of India?\")\nSpeak(a + \"Do you want to know more about it?\")\n```\n2. Weather: You can use the predefined function \"getWeather()\" to get the current weather of any location. The function takes a string as input and returns the weather information.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = googleSearch(\"What is the capital of India?\")\nSpeak(a + \"Do you want to know more about it?\")\n```\n2. Weather: You can use the predefined function \"getWeather()\" to get the current weather of any location. The function takes a string as input and returns the weather information.\nTakes a string for location as input and returns the weather information in form of a complete sentence.\nFormat:\n```python\na = getWeather(\"Mumbai\")\nSpeak(a)\n```",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getWeather(\"Mumbai\")\nSpeak(a)\n```\n3. Send WhatsApp Message: You can use the predefined function \"sendWhatsApp()\" to send a WhatsApp message to any contact mentioned above. The function takes two strings as input, the contact name and the message to be sent. If the whatsapp term or even the \"message\" term is used, Consider it to be a whatsapp message.\nFormat:\n```python\nmessage = \"I am going to be late today\"\nsendWhatsApp(\"Mom\", message)\nSpeak(\"Message sent to Mom\" + message)\n```",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "message = \"I am going to be late today\"\nsendWhatsApp(\"Mom\", message)\nSpeak(\"Message sent to Mom\" + message)\n```\n4. Play Music: You can use the predefined function \"playMusic()\" to play music from YouTube. The function takes a string as input, the name of the song, and plays it on YouTube.\nFormat:\n```python\nSpeak(\"Playing Shape of You on Youtube, Sir.\")\nplayMusic(\"Shape of You\")\n```",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getNews()\nSpeak(a)\n```\n6. To Do List Automation: You can use the predefined function \"GetToDoList()\" to get the elements of the To Do List and Speak them. The function takes no input and returns the To Do List.\nFormat:\n```python\nSpeak(\"Here is your To Do List for today which you have asked me to add by now.\")\na = GetToDoList()\nSpeak(a)\n```",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = GetToDoList()\nSpeak(a)\n```\n7. Add To Do List: You can use the predefined function \"AddToDoList()\" to add an element to the To Do List. The function takes a string as input, the element to be added, and returns the updated To Do List.\nFormat:\n```python\na = AddToDoList(\"Buy Groceries\")\nSpeak(\"Added Buy Groceries to your To Do List\")\n```\n8. Remove from To Do List: You can use the predefined function \"RemoveToDoList()\" to remove an element from the To Do List. The function takes a string as input, the element to be removed, and returns the updated To Do List.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = AddToDoList(\"Buy Groceries\")\nSpeak(\"Added Buy Groceries to your To Do List\")\n```\n8. Remove from To Do List: You can use the predefined function \"RemoveToDoList()\" to remove an element from the To Do List. The function takes a string as input, the element to be removed, and returns the updated To Do List.\nFormat:\n```python\na = RemoveToDoList(\"Buy Groceries\")\nSpeak(\"Removed Buy Groceries from your To Do List\")\n```\n9. Set Reminder: You can use the predefined function \"SetReminder()\" to set a reminder. The function takes two strings as input, the reminder message and the time, and returns the reminder message.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = RemoveToDoList(\"Buy Groceries\")\nSpeak(\"Removed Buy Groceries from your To Do List\")\n```\n9. Set Reminder: You can use the predefined function \"SetReminder()\" to set a reminder. The function takes two strings as input, the reminder message and the time, and returns the reminder message.\nFormat:\n```python\na = SetReminder(\"Meeting with the client\", \"4:00 PM\")\nSpeak(\"Reminder set for Meeting with the client at 4:00 PM\")\n```\n10. Get Today's Date: You can use the predefined function \"getTodayDate()\" to get the Date of the current day. The function takes no input and returns the Date of the current day.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = SetReminder(\"Meeting with the client\", \"4:00 PM\")\nSpeak(\"Reminder set for Meeting with the client at 4:00 PM\")\n```\n10. Get Today's Date: You can use the predefined function \"getTodayDate()\" to get the Date of the current day. The function takes no input and returns the Date of the current day.\nFormat:\n```python\na = getTodayDate()\nSpeak(\"Today's date is \" + a)\n```\n9. Getting System Information: You can use the predefined function \"getSystemInfo()\" to get the System Information. The function takes one input and returns the Desired System Information.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getTodayDate()\nSpeak(\"Today's date is \" + a)\n```\n9. Getting System Information: You can use the predefined function \"getSystemInfo()\" to get the System Information. The function takes one input and returns the Desired System Information.\nHere are a fixed no of things that you can ask for (at once only): CPU usage, RAM usage, Disk usage and Battery percentage only.\n```python\nSpeak(\"Here is the System Information you asked for my master.\")\nCpu = getSystemInfo(\"CPU\")\nRam = getSystemInfo(\"RAM\")\nDisk = getSystemInfo(\"DISK\")",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "Cpu",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "Cpu = getSystemInfo(\"CPU\")\nRam = getSystemInfo(\"RAM\")\nDisk = getSystemInfo(\"DISK\")\nBattery = getSystemInfo(\"BATTERY\")\nSpeak(\"CPU Usage is \" + Cpu)\nSpeak(\"RAM Usage is \" + Ram)\nSpeak(\"Disk Usage is \" + Disk)\nSpeak(\"Battery Percentage is \" + Battery)\n```\n10. Generating a Random Number: You can use the predefined function \"generateRandomNumber()\" to generate a random number. The function takes two integers as input, the lower and upper limits, and returns a random number between them.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "Ram",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "Ram = getSystemInfo(\"RAM\")\nDisk = getSystemInfo(\"DISK\")\nBattery = getSystemInfo(\"BATTERY\")\nSpeak(\"CPU Usage is \" + Cpu)\nSpeak(\"RAM Usage is \" + Ram)\nSpeak(\"Disk Usage is \" + Disk)\nSpeak(\"Battery Percentage is \" + Battery)\n```\n10. Generating a Random Number: You can use the predefined function \"generateRandomNumber()\" to generate a random number. The function takes two integers as input, the lower and upper limits, and returns a random number between them.\nFormat:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "Disk",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "Disk = getSystemInfo(\"DISK\")\nBattery = getSystemInfo(\"BATTERY\")\nSpeak(\"CPU Usage is \" + Cpu)\nSpeak(\"RAM Usage is \" + Ram)\nSpeak(\"Disk Usage is \" + Disk)\nSpeak(\"Battery Percentage is \" + Battery)\n```\n10. Generating a Random Number: You can use the predefined function \"generateRandomNumber()\" to generate a random number. The function takes two integers as input, the lower and upper limits, and returns a random number between them.\nFormat:\n```python",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "Battery",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "Battery = getSystemInfo(\"BATTERY\")\nSpeak(\"CPU Usage is \" + Cpu)\nSpeak(\"RAM Usage is \" + Ram)\nSpeak(\"Disk Usage is \" + Disk)\nSpeak(\"Battery Percentage is \" + Battery)\n```\n10. Generating a Random Number: You can use the predefined function \"generateRandomNumber()\" to generate a random number. The function takes two integers as input, the lower and upper limits, and returns a random number between them.\nFormat:\n```python\na = generateRandomNumber(1, 100)",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = generateRandomNumber(1, 100)\nSpeak(\"The random number is \" + a)\n```\n11. Getting the Current Time: You can use the predefined function \"getCurrentTime()\" to get the current time. The function takes no input and returns the current time.\nFormat:\n```python\na = getCurrentTime()\nSpeak(\"The current time is \" + a)\n```\n12. Getting the Current Day: You can use the predefined function \"getCurrentDay()\" to get the current day. The function takes no input and returns the current day.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getCurrentTime()\nSpeak(\"The current time is \" + a)\n```\n12. Getting the Current Day: You can use the predefined function \"getCurrentDay()\" to get the current day. The function takes no input and returns the current day.\nFormat:\n```python\na = getCurrentDay()\nSpeak(\"Today is \" + a)\n```\n13. Getting Selected Data: You can use the predefined function \"getSelectedData()\" to get the selected data. The function takes in no input and returns the selected data.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getCurrentDay()\nSpeak(\"Today is \" + a)\n```\n13. Getting Selected Data: You can use the predefined function \"getSelectedData()\" to get the selected data. The function takes in no input and returns the selected data.\nFormat:\n```python\na = getSelectedData()\n```\n(Eg: If the user has selected a text on the screen and wants you to read it)\n```python",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getSelectedData()\n```\n(Eg: If the user has selected a text on the screen and wants you to read it)\n```python\na = getSelectedData()\nSpeak(\"The thing you asked me to read is \" + a)\n```\n(Eg: If the user has selected a term and wants you to open a wikipedia page for it.)\n```python\na = getSelectedData()",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getSelectedData()\nSpeak(\"The thing you asked me to read is \" + a)\n```\n(Eg: If the user has selected a term and wants you to open a wikipedia page for it.)\n```python\na = getSelectedData()\nSpeak(\"Opening the Wikipedia page for \" + a)\nwebbrowser.open(\"https://en.wikipedia.org/w/index.php?fulltext=1&profile=default&search=\" + a)\n```\n14. Getting Stock prices: You can use the predefined function \"getStockPrices()\" to get the stock prices of a company. The function takes a string as input, the name of the company, and returns the stock prices.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getSelectedData()\nSpeak(\"Opening the Wikipedia page for \" + a)\nwebbrowser.open(\"https://en.wikipedia.org/w/index.php?fulltext=1&profile=default&search=\" + a)\n```\n14. Getting Stock prices: You can use the predefined function \"getStockPrices()\" to get the stock prices of a company. The function takes a string as input, the name of the company, and returns the stock prices.\nFormat:\n```python\na = getStockPrices(\"Apple\")\nSpeak(\"The stock prices of Apple are \" + a)\n```",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getStockPrices(\"Apple\")\nSpeak(\"The stock prices of Apple are \" + a)\n```\n15. Text Summarisation: You can use the predefined function \"textSummarisation()\" to summarise a text. The function takes a string as input, the text to be summarised, and returns the summary.\nFormat:\n```python\na = textSummarisation(\" ... ... ... \")\nSpeak(\"The summary of the text is \" + a)\n```\n(eg: If the user has selected a text on the screen and wants you to summarise it)",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = textSummarisation(\" ... ... ... \")\nSpeak(\"The summary of the text is \" + a)\n```\n(eg: If the user has selected a text on the screen and wants you to summarise it)\n```python\na = getSelectedData()\nb = textSummarisation(a)\nSpeak(\"The summary of the text you asked me to summarise is \" + b)\n```\n16. Text Translation: You can use the predefined function \"textTranslation()\" to translate a text. The function takes no input and open up a different app for Text translation.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getSelectedData()\nb = textSummarisation(a)\nSpeak(\"The summary of the text you asked me to summarise is \" + b)\n```\n16. Text Translation: You can use the predefined function \"textTranslation()\" to translate a text. The function takes no input and open up a different app for Text translation.\nFormat:\n```python\nSpeak(\"Opening the Text Translation window for you.\")\ntextTranslation()\n```",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "b = textSummarisation(a)\nSpeak(\"The summary of the text you asked me to summarise is \" + b)\n```\n16. Text Translation: You can use the predefined function \"textTranslation()\" to translate a text. The function takes no input and open up a different app for Text translation.\nFormat:\n```python\nSpeak(\"Opening the Text Translation window for you.\")\ntextTranslation()\n```\n17. Copy to Clipboard: You can use the predefined function \"copyToClipboard()\" to copy a text to the clipboard. The function takes a string as input, the text to be copied, and returns nothing.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getSelectedData()\nb = textSummarisation(a)\ncopyToClipboard(b)\nSpeak(\"The summary of the text you asked me to summarise has been copied to the clipboard.\")\n```\n18. Data Visualisation: You can use the predefined function \"dataVisualisation()\" to visualise data. The function takes a sting data to get the data to be visualised in form of a para and opens up a different app for Data Visualisation.\nFormat:\n```python\ndataVisualisation(\" ... ... ... \")\n```",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "b = textSummarisation(a)\ncopyToClipboard(b)\nSpeak(\"The summary of the text you asked me to summarise has been copied to the clipboard.\")\n```\n18. Data Visualisation: You can use the predefined function \"dataVisualisation()\" to visualise data. The function takes a sting data to get the data to be visualised in form of a para and opens up a different app for Data Visualisation.\nFormat:\n```python\ndataVisualisation(\" ... ... ... \")\n```\n(eg: If the user has selected a text on the screen and wants you to visualise it)",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = getSelectedData()\ndataVisualisation(a)\nSpeak(\"The data you asked me to visualise has been opened in a new window.\")\n```\n19. Power Management: You can use the prefefined functions Sleep(), Shutdown(), Restart() and Lock() to perform the respective tasks. Takes no input and returns nothing.\nFormats respectively for each case:\n```python\nSleep()\n```\n```python",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = browserAutomation(\"Open a new tab\")\nSpeak(\"A new tab has been opened for you, my Master.\")\n```\n21. New meeting: You can use the predefined function \"newMeeting()\" to open a new meeting. The function takes no input and returns the no output.\nFormat:\n```python\nnewMeeting()\nSpeak(\"A new meeting has been opened for you, Sir.\")\n```\n22. Home Automation: For this, you have two functions \"turnOn()\" and \"turnOff()\". You can use the predefined function \"turnOn()\" to turn on the lights and \"turnOff()\" to turn off the lights. The function takes no input and returns the output.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = wordRelations(\"Apple\", \"meaning\")\nSpeak(\"The meaning of Apple is \" + a)\n```\n24. Math Problem: You can use the predefined function \"mathProblem()\" to solve a math problem. The function takes a string as input, the math problem, and returns a solution.\nFormat:\n```python\na = mathProblem(\"What is 326 multiplied by 4 divided by 2\")\nSpeak(\"The solution to this is \" + a)\n```\n25. WriteViaKeyboard: You can use the predefined function \"writeViaKeyboard()\" to write using the keyboard. The function takes a string as input, the text to be written, and returns no output.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = mathProblem(\"What is 326 multiplied by 4 divided by 2\")\nSpeak(\"The solution to this is \" + a)\n```\n25. WriteViaKeyboard: You can use the predefined function \"writeViaKeyboard()\" to write using the keyboard. The function takes a string as input, the text to be written, and returns no output.\nFormat:\n```python\nwriteViaKeyboard(\"Hello, I am Jarvis.\")\nSpeak(\"The text has been written.\")\n```\n26. Voice Typing: You can use the predefined function \"voiceTyping()\" to type using voice. The function takes no input and gives the output. You may want to even use the \"writeViaKeyboard()\" function to write the text.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "a = voiceTyping()\nwriteViaKeyboard(a)\nSpeak(\"The text has been written.\")\n```\n# TODO: <Functions Need to be defined>\n\"\"\"\nprompt_history = f\"\"\"\n\"\"\"\nprompt_summary = f\"\"\"\n# Dare not write any form of text except for code.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "prompt_history",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "prompt_history = f\"\"\"\n\"\"\"\nprompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.\n# Dare not use any input function. If you want to ask something from the user, use the speak function and just directly ask it.\n# The userbase is Indian. So, make sure to use Indian examples and references if used.\n# At no cost you may change the syntax of the output. It is:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "prompt_summary",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "prompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.\n# Dare not use any input function. If you want to ask something from the user, use the speak function and just directly ask it.\n# The userbase is Indian. So, make sure to use Indian examples and references if used.\n# At no cost you may change the syntax of the output. It is:\n```python\n-code-",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "MAX_HIST",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "MAX_HIST = 10\ndef addHistory(index, input_, output_):\n  if __name__ == \"__main__\": time.sleep(1) \n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  #print(type(json_obj[str(index)][\"history\"]))\n  while len(json_obj[str(index)][\"history\"]) >= MAX_HIST:\n    json_obj[str(index)][\"history\"].pop(0)\n  json_obj[str(index)][\"history\"].append({\"input\": str(input_), \"output\": str(output_)})\n  with open('Database//History//history.json', 'w') as f:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "ExecuteCode",
        "kind": 2,
        "importPath": "Functions.Execute",
        "description": "Functions.Execute",
        "peekOfCode": "def ExecuteCode(code_str: str) -> None:\n    try:\n        exec(code_str)\n    except Exception as e:\n        print('Error in ExecuteCode function(Execute.py), code contained in input string has wrong syntax OR wrong datatype argument. Error:', e)\n# Test cases\nif __name__ == '__main__':\n    ExecuteCode('print(\"hello world\")')\n    ExecuteCode('print(\"hi\")\\nprint(\"yo\")')\n    ExecuteCode('import math\\nprint(math.sqrt(49))')",
        "detail": "Functions.Execute",
        "documentation": {}
    },
    {
        "label": "Listen",
        "kind": 2,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "def Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":\n      print(f\"You : {text}\")\n      driver.find_element(by=By.ID, value='end').click()\n      return text",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "os.environ['WDM_LOG']",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "os.environ['WDM_LOG'] = '0'\nservice = Service(ChromeDriverManager().install())\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "service = Service(ChromeDriverManager().install())\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "chrome_options",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "chrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "driver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "website = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":\n      print(f\"You : {text}\")",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "Speak",
        "kind": 2,
        "importPath": "Functions.Speak",
        "description": "Functions.Speak",
        "peekOfCode": "def Speak(*args):\n  global process\n  audio = \"\"\n  for i in args:\n    audio += str(i)\n  audio = audio.replace('\"', \"\")\n  audio = audio.replace('*', \"dash \")\n  with open(\"Database//Speak//Speak.txt\", \"w\") as file:\n    file.write(audio)\n    process = subprocess.Popen([\"python\", \"Utils//RunTTS.py\"])",
        "detail": "Functions.Speak",
        "documentation": {}
    },
    {
        "label": "TTSK",
        "kind": 2,
        "importPath": "Functions.Speak",
        "description": "Functions.Speak",
        "peekOfCode": "def TTSK():\n  process.kill()\n  print(\"Speech Process Terminated\")\nif __name__ == \"__main__\":\n  while True:\n    Speak(input(\">>> \"))\n#? Author - Arnav Singh (https://github.com/Arnav3241)",
        "detail": "Functions.Speak",
        "documentation": {}
    },
    {
        "label": "SpeakSync",
        "kind": 2,
        "importPath": "Functions.SpeakSync",
        "description": "Functions.SpeakSync",
        "peekOfCode": "def SpeakSync(*args):\n  global process\n  audio = \"\"\n  for i in args:\n    audio += str(i)\n  audio = audio.replace('\"', \"\")\n  audio = audio.replace('*', \"dash \")\n  with open(\"Database//Speak//Speak.txt\", \"w\") as file:\n    file.write(audio)\n  subprocess.run([\"python\", \"Utils//RunTTS.py\"])",
        "detail": "Functions.SpeakSync",
        "documentation": {}
    },
    {
        "label": "TTSK",
        "kind": 2,
        "importPath": "Functions.SpeakSync",
        "description": "Functions.SpeakSync",
        "peekOfCode": "def TTSK():\n  process.kill()\n  print(\"Speech Process Terminated\")\nif __name__ == \"__main__\":\n  while True:\n    SpeakSync(input(\">>> \"))\n#? Author - Arnav Singh (https://github.com/Arnav3241)",
        "detail": "Functions.SpeakSync",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 2,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "def Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:\n    return None\nprompt_general_instuctions = f\"\"\"\nYou are Jarvis, an AI model that has been created for the convenience of the user by Arnav Singh (https://github.com/Arnav3241) and Avi Sinha (https://github.com/Avi0981). ",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "addHistory",
        "kind": 2,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "def addHistory(index, input_, output_):\n  if __name__ == \"__main__\": time.sleep(1) \n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  #print(type(json_obj[str(index)][\"history\"]))\n  while len(json_obj[str(index)][\"history\"]) >= MAX_HIST:\n    json_obj[str(index)][\"history\"].pop(0)\n  json_obj[str(index)][\"history\"].append({\"input\": str(input_), \"output\": str(output_)})\n  with open('Database//History//history.json', 'w') as f:\n    json_str = json.dumps(json_obj)",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "updateName",
        "kind": 2,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "def updateName(index, name):\n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  json_obj[str(index)][\"name\"] = str(name)\n  json_str = json.dumps(json_obj)\n  with open('Database//History//history.json', 'w') as f:\n    f.write(json_str)\ndef Response(input):  \n  input = input.lower()\n  # global Cache",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 2,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "def Response(input):  \n  input = input.lower()\n  # global Cache\n  # if os.path.exists(file):\n  #   with open(file, 'r') as fData: \n  #     Cache = json.load(fData)\n  #     if Cache == \"\": Cache = {}\n  # else: Cache = []\n  # for element in Cache:\n  #   if element[\"input\"] == input:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "Cache",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "Cache = []\nfile = r\"Cache/Cache.json\"\n#filter python code for gpt responce\ndef Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "file = r\"Cache/Cache.json\"\n#filter python code for gpt responce\ndef Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:\n    return None",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "prompt_general_instuctions",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "prompt_general_instuctions = f\"\"\"\nYou are Jarvis, an AI model that has been created for the convenience of the user by Arnav Singh (https://github.com/Arnav3241) and Avi Sinha (https://github.com/Avi0981). \nYour job is to act as the brain of AI and perform various tasks which will be instructed how to do so later below.\nYou can respond only in the form of code. No text is allowed.\nOnly Python Language is allowed. Only a single piece of code is allowed which can be ran by pasting it in a python file.\nNOTE: If you want to say something to te user, you can not use the print() function. Instead you need to use the use the Speak function. It can be used directly by entering text into it. It;s syntax is given below:\nSpeak(\"Hello, I am Jarvis. How can I help you?\")\nNOTE: If there are multiple taskes given at once by the user and one of the tasks requires a query from the user, then ask it at the end after complting the other queries. If you have queries regarding multple commands just say it at the end in brief that wat all info do you need for the next time.\nNOTE: For Educational Conversations, explain concepts clearly and thoroughly. Use simple language and offer additional help if needed. Make sure to give examples.\nNOTE: In case of creative conversations, be imaginative and engaging. Use descriptive language and encourage user participation.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "prompt_capabilities",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "prompt_capabilities = f\"\"\"\nThese are the functions you can use in the code:\n1. Google Search: You can use the predefined function \"googleSearch()\" to search for anything on Google. The function takes a string as input and returns the search results.\nTakes a string as input and returns the search results.\nFormat:\n```python\na = googleSearch(\"What is the capital of India?\")\nSpeak(a + \"Do you want to know more about it?\")\n```\n2. Weather: You can use the predefined function \"getWeather()\" to get the current weather of any location. The function takes a string as input and returns the weather information.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = googleSearch(\"What is the capital of India?\")\nSpeak(a + \"Do you want to know more about it?\")\n```\n2. Weather: You can use the predefined function \"getWeather()\" to get the current weather of any location. The function takes a string as input and returns the weather information.\nTakes a string for location as input and returns the weather information in form of a complete sentence.\nFormat:\n```python\na = getWeather(\"Mumbai\")\nSpeak(a)\n```",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getWeather(\"Mumbai\")\nSpeak(a)\n```\n3. Send WhatsApp Message: You can use the predefined function \"sendWhatsApp()\" to send a WhatsApp message to any contact mentioned above. The function takes two strings as input, the contact name and the message to be sent. If the whatsapp term or even the \"message\" term is used, Consider it to be a whatsapp message.\nFormat:\n```python\nmessage = \"I am going to be late today\"\nsendWhatsApp(\"Mom\", message)\nSpeak(\"Message sent to Mom\" + message)\n```",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "message = \"I am going to be late today\"\nsendWhatsApp(\"Mom\", message)\nSpeak(\"Message sent to Mom\" + message)\n```\n4. Play Music: You can use the predefined function \"playMusic()\" to play music from YouTube. The function takes a string as input, the name of the song, and plays it on YouTube.\nFormat:\n```python\nSpeak(\"Playing Shape of You on Youtube, Sir.\")\nplayMusic(\"Shape of You\")\n```",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getNews()\nSpeak(a)\n```\n6. To Do List Automation: You can use the predefined function \"GetToDoList()\" to get the elements of the To Do List and Speak them. The function takes no input and returns the To Do List.\nFormat:\n```python\nSpeak(\"Here is your To Do List for today which you have asked me to add by now.\")\na = GetToDoList()\nSpeak(a)\n```",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = GetToDoList()\nSpeak(a)\n```\n7. Add To Do List: You can use the predefined function \"AddToDoList()\" to add an element to the To Do List. The function takes a string as input, the element to be added, and returns the updated To Do List.\nFormat:\n```python\na = AddToDoList(\"Buy Groceries\")\nSpeak(\"Added Buy Groceries to your To Do List\")\n```\n8. Remove from To Do List: You can use the predefined function \"RemoveToDoList()\" to remove an element from the To Do List. The function takes a string as input, the element to be removed, and returns the updated To Do List.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = AddToDoList(\"Buy Groceries\")\nSpeak(\"Added Buy Groceries to your To Do List\")\n```\n8. Remove from To Do List: You can use the predefined function \"RemoveToDoList()\" to remove an element from the To Do List. The function takes a string as input, the element to be removed, and returns the updated To Do List.\nFormat:\n```python\na = RemoveToDoList(\"Buy Groceries\")\nSpeak(\"Removed Buy Groceries from your To Do List\")\n```\n9. Set Reminder: You can use the predefined function \"SetReminder()\" to set a reminder. The function takes two strings as input, the reminder message and the time, and returns the reminder message.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = RemoveToDoList(\"Buy Groceries\")\nSpeak(\"Removed Buy Groceries from your To Do List\")\n```\n9. Set Reminder: You can use the predefined function \"SetReminder()\" to set a reminder. The function takes two strings as input, the reminder message and the time, and returns the reminder message.\nFormat:\n```python\na = SetReminder(\"Meeting with the client\", \"4:00 PM\")\nSpeak(\"Reminder set for Meeting with the client at 4:00 PM\")\n```\n10. Get Today's Date: You can use the predefined function \"getTodayDate()\" to get the Date of the current day. The function takes no input and returns the Date of the current day.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = SetReminder(\"Meeting with the client\", \"4:00 PM\")\nSpeak(\"Reminder set for Meeting with the client at 4:00 PM\")\n```\n10. Get Today's Date: You can use the predefined function \"getTodayDate()\" to get the Date of the current day. The function takes no input and returns the Date of the current day.\nFormat:\n```python\na = getTodayDate()\nSpeak(\"Today's date is \" + a)\n```\n9. Getting System Information: You can use the predefined function \"getSystemInfo()\" to get the System Information. The function takes one input and returns the Desired System Information.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getTodayDate()\nSpeak(\"Today's date is \" + a)\n```\n9. Getting System Information: You can use the predefined function \"getSystemInfo()\" to get the System Information. The function takes one input and returns the Desired System Information.\nHere are a fixed no of things that you can ask for (at once only): CPU usage, RAM usage, Disk usage and Battery percentage only.\n```python\nSpeak(\"Here is the System Information you asked for my master.\")\nCpu = getSystemInfo(\"CPU\")\nRam = getSystemInfo(\"RAM\")\nDisk = getSystemInfo(\"DISK\")",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "Cpu",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "Cpu = getSystemInfo(\"CPU\")\nRam = getSystemInfo(\"RAM\")\nDisk = getSystemInfo(\"DISK\")\nBattery = getSystemInfo(\"BATTERY\")\nSpeak(\"CPU Usage is \" + Cpu)\nSpeak(\"RAM Usage is \" + Ram)\nSpeak(\"Disk Usage is \" + Disk)\nSpeak(\"Battery Percentage is \" + Battery)\n```\n10. Generating a Random Number: You can use the predefined function \"generateRandomNumber()\" to generate a random number. The function takes two integers as input, the lower and upper limits, and returns a random number between them.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "Ram",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "Ram = getSystemInfo(\"RAM\")\nDisk = getSystemInfo(\"DISK\")\nBattery = getSystemInfo(\"BATTERY\")\nSpeak(\"CPU Usage is \" + Cpu)\nSpeak(\"RAM Usage is \" + Ram)\nSpeak(\"Disk Usage is \" + Disk)\nSpeak(\"Battery Percentage is \" + Battery)\n```\n10. Generating a Random Number: You can use the predefined function \"generateRandomNumber()\" to generate a random number. The function takes two integers as input, the lower and upper limits, and returns a random number between them.\nFormat:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "Disk",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "Disk = getSystemInfo(\"DISK\")\nBattery = getSystemInfo(\"BATTERY\")\nSpeak(\"CPU Usage is \" + Cpu)\nSpeak(\"RAM Usage is \" + Ram)\nSpeak(\"Disk Usage is \" + Disk)\nSpeak(\"Battery Percentage is \" + Battery)\n```\n10. Generating a Random Number: You can use the predefined function \"generateRandomNumber()\" to generate a random number. The function takes two integers as input, the lower and upper limits, and returns a random number between them.\nFormat:\n```python",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "Battery",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "Battery = getSystemInfo(\"BATTERY\")\nSpeak(\"CPU Usage is \" + Cpu)\nSpeak(\"RAM Usage is \" + Ram)\nSpeak(\"Disk Usage is \" + Disk)\nSpeak(\"Battery Percentage is \" + Battery)\n```\n10. Generating a Random Number: You can use the predefined function \"generateRandomNumber()\" to generate a random number. The function takes two integers as input, the lower and upper limits, and returns a random number between them.\nFormat:\n```python\na = generateRandomNumber(1, 100)",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = generateRandomNumber(1, 100)\nSpeak(\"The random number is \" + a)\n```\n11. Getting the Current Time: You can use the predefined function \"getCurrentTime()\" to get the current time. The function takes no input and returns the current time.\nFormat:\n```python\na = getCurrentTime()\nSpeak(\"The current time is \" + a)\n```\n12. Getting the Current Day: You can use the predefined function \"getCurrentDay()\" to get the current day. The function takes no input and returns the current day.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getCurrentTime()\nSpeak(\"The current time is \" + a)\n```\n12. Getting the Current Day: You can use the predefined function \"getCurrentDay()\" to get the current day. The function takes no input and returns the current day.\nFormat:\n```python\na = getCurrentDay()\nSpeak(\"Today is \" + a)\n```\n13. Getting Selected Data: You can use the predefined function \"getSelectedData()\" to get the selected data. The function takes in no input and returns the selected data.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getCurrentDay()\nSpeak(\"Today is \" + a)\n```\n13. Getting Selected Data: You can use the predefined function \"getSelectedData()\" to get the selected data. The function takes in no input and returns the selected data.\nFormat:\n```python\na = getSelectedData()\n```\n(Eg: If the user has selected a text on the screen and wants you to read it)\n```python",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getSelectedData()\n```\n(Eg: If the user has selected a text on the screen and wants you to read it)\n```python\na = getSelectedData()\nSpeak(\"The thing you asked me to read is \" + a)\n```\n(Eg: If the user has selected a term and wants you to open a wikipedia page for it.)\n```python\na = getSelectedData()",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getSelectedData()\nSpeak(\"The thing you asked me to read is \" + a)\n```\n(Eg: If the user has selected a term and wants you to open a wikipedia page for it.)\n```python\na = getSelectedData()\nSpeak(\"Opening the Wikipedia page for \" + a)\nwebbrowser.open(\"https://en.wikipedia.org/w/index.php?fulltext=1&profile=default&search=\" + a)\n```\n14. Getting Stock prices: You can use the predefined function \"getStockPrices()\" to get the stock prices of a company. The function takes a string as input, the name of the company, and returns the stock prices.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getSelectedData()\nSpeak(\"Opening the Wikipedia page for \" + a)\nwebbrowser.open(\"https://en.wikipedia.org/w/index.php?fulltext=1&profile=default&search=\" + a)\n```\n14. Getting Stock prices: You can use the predefined function \"getStockPrices()\" to get the stock prices of a company. The function takes a string as input, the name of the company, and returns the stock prices.\nFormat:\n```python\na = getStockPrices(\"Apple\")\nSpeak(\"The stock prices of Apple are \" + a)\n```",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getStockPrices(\"Apple\")\nSpeak(\"The stock prices of Apple are \" + a)\n```\n15. Text Summarisation: You can use the predefined function \"textSummarisation()\" to summarise a text. The function takes a string as input, the text to be summarised, and returns the summary.\nFormat:\n```python\na = textSummarisation(\" ... ... ... \")\nSpeak(\"The summary of the text is \" + a)\n```\n(eg: If the user has selected a text on the screen and wants you to summarise it)",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = textSummarisation(\" ... ... ... \")\nSpeak(\"The summary of the text is \" + a)\n```\n(eg: If the user has selected a text on the screen and wants you to summarise it)\n```python\na = getSelectedData()\nb = textSummarisation(a)\nSpeak(\"The summary of the text you asked me to summarise is \" + b)\n```\n16. Text Translation: You can use the predefined function \"textTranslation()\" to translate a text. The function takes no input and open up a different app for Text translation.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getSelectedData()\nb = textSummarisation(a)\nSpeak(\"The summary of the text you asked me to summarise is \" + b)\n```\n16. Text Translation: You can use the predefined function \"textTranslation()\" to translate a text. The function takes no input and open up a different app for Text translation.\nFormat:\n```python\nSpeak(\"Opening the Text Translation window for you.\")\ntextTranslation()\n```",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "b = textSummarisation(a)\nSpeak(\"The summary of the text you asked me to summarise is \" + b)\n```\n16. Text Translation: You can use the predefined function \"textTranslation()\" to translate a text. The function takes no input and open up a different app for Text translation.\nFormat:\n```python\nSpeak(\"Opening the Text Translation window for you.\")\ntextTranslation()\n```\n17. Copy to Clipboard: You can use the predefined function \"copyToClipboard()\" to copy a text to the clipboard. The function takes a string as input, the text to be copied, and returns nothing.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getSelectedData()\nb = textSummarisation(a)\ncopyToClipboard(b)\nSpeak(\"The summary of the text you asked me to summarise has been copied to the clipboard.\")\n```\n18. Data Visualisation: You can use the predefined function \"dataVisualisation()\" to visualise data. The function takes a sting data to get the data to be visualised in form of a para and opens up a different app for Data Visualisation.\nFormat:\n```python\ndataVisualisation(\" ... ... ... \")\n```",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "b = textSummarisation(a)\ncopyToClipboard(b)\nSpeak(\"The summary of the text you asked me to summarise has been copied to the clipboard.\")\n```\n18. Data Visualisation: You can use the predefined function \"dataVisualisation()\" to visualise data. The function takes a sting data to get the data to be visualised in form of a para and opens up a different app for Data Visualisation.\nFormat:\n```python\ndataVisualisation(\" ... ... ... \")\n```\n(eg: If the user has selected a text on the screen and wants you to visualise it)",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = getSelectedData()\ndataVisualisation(a)\nSpeak(\"The data you asked me to visualise has been opened in a new window.\")\n```\n19. Power Management: You can use the prefefined functions Sleep(), Shutdown(), Restart() and Lock() to perform the respective tasks. Takes no input and returns nothing.\nFormats respectively for each case:\n```python\nSleep()\n```\n```python",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = browserAutomation(\"Open a new tab\")\nSpeak(\"A new tab has been opened for you, my Master.\")\n```\n21. New meeting: You can use the predefined function \"newMeeting()\" to open a new meeting. The function takes no input and returns the no output.\nFormat:\n```python\nnewMeeting()\nSpeak(\"A new meeting has been opened for you, Sir.\")\n```\n22. Home Automation: For this, you have two functions \"turnOn()\" and \"turnOff()\". You can use the predefined function \"turnOn()\" to turn on the lights and \"turnOff()\" to turn off the lights. The function takes no input and returns the output.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = wordRelations(\"Apple\", \"meaning\")\nSpeak(\"The meaning of Apple is \" + a)\n```\n24. Math Problem: You can use the predefined function \"mathProblem()\" to solve a math problem. The function takes a string as input, the math problem, and returns a solution.\nFormat:\n```python\na = mathProblem(\"What is 326 multiplied by 4 divided by 2\")\nSpeak(\"The solution to this is \" + a)\n```\n25. WriteViaKeyboard: You can use the predefined function \"writeViaKeyboard()\" to write using the keyboard. The function takes a string as input, the text to be written, and returns no output.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = mathProblem(\"What is 326 multiplied by 4 divided by 2\")\nSpeak(\"The solution to this is \" + a)\n```\n25. WriteViaKeyboard: You can use the predefined function \"writeViaKeyboard()\" to write using the keyboard. The function takes a string as input, the text to be written, and returns no output.\nFormat:\n```python\nwriteViaKeyboard(\"Hello, I am Jarvis.\")\nSpeak(\"The text has been written.\")\n```\n26. Voice Typing: You can use the predefined function \"voiceTyping()\" to type using voice. The function takes no input and gives the output. You may want to even use the \"writeViaKeyboard()\" function to write the text.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "a = voiceTyping()\nwriteViaKeyboard(a)\nSpeak(\"The text has been written.\")\n```\n# TODO: <Functions Need to be defined>\n\"\"\"\nprompt_history = f\"\"\"\n\"\"\"\nprompt_summary = f\"\"\"\n# Dare not write any form of text except for code.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "prompt_history",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "prompt_history = f\"\"\"\n\"\"\"\nprompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.\n# Dare not use any input function. If you want to ask something from the user, use the speak function and just directly ask it.\n# The userbase is Indian. So, make sure to use Indian examples and references if used.\n# At no cost you may change the syntax of the output. It is:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "prompt_summary",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "prompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.\n# Dare not use any input function. If you want to ask something from the user, use the speak function and just directly ask it.\n# The userbase is Indian. So, make sure to use Indian examples and references if used.\n# At no cost you may change the syntax of the output. It is:\n```python\n-code-",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "MAX_HIST",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "MAX_HIST = 10\ndef addHistory(index, input_, output_):\n  if __name__ == \"__main__\": time.sleep(1) \n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  #print(type(json_obj[str(index)][\"history\"]))\n  while len(json_obj[str(index)][\"history\"]) >= MAX_HIST:\n    json_obj[str(index)][\"history\"].pop(0)\n  json_obj[str(index)][\"history\"].append({\"input\": str(input_), \"output\": str(output_)})\n  with open('Database//History//history.json', 'w') as f:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "generation_config",
        "kind": 5,
        "importPath": "Tests.2",
        "description": "Tests.2",
        "peekOfCode": "generation_config = {\n  \"temperature\": 1,\n  \"top_p\": 0.95,\n  \"top_k\": 64,\n  \"max_output_tokens\": 8192,\n  \"response_mime_type\": \"text/plain\",\n}\nmodel = genai.GenerativeModel(\n  model_name=\"gemini-1.5-pro\",\n  generation_config=generation_config,",
        "detail": "Tests.2",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Tests.2",
        "description": "Tests.2",
        "peekOfCode": "model = genai.GenerativeModel(\n  model_name=\"gemini-1.5-pro\",\n  generation_config=generation_config,\n  # safety_settings = Adjust safety settings\n  # See https://ai.google.dev/gemini-api/docs/safety-settings\n)\nchat_session = model.start_chat(\n  history=[\n  ]\n)",
        "detail": "Tests.2",
        "documentation": {}
    },
    {
        "label": "chat_session",
        "kind": 5,
        "importPath": "Tests.2",
        "description": "Tests.2",
        "peekOfCode": "chat_session = model.start_chat(\n  history=[\n  ]\n)\nresponse = chat_session.send_message(\"Hi\")\nprint(response.text)",
        "detail": "Tests.2",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Tests.2",
        "description": "Tests.2",
        "peekOfCode": "response = chat_session.send_message(\"Hi\")\nprint(response.text)",
        "detail": "Tests.2",
        "documentation": {}
    },
    {
        "label": "#path_to_video_file",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "#path_to_video_file = 'Sherlock_Jr_FullMovie.mp4'\n# Upload the video using the Files API\n#video_file = genai.upload_file(path=path_to_video_file)\n# Wait for the file to finish processing\n'''\nwhile video_file.state.name == 'PROCESSING':\n  print('Waiting for video to be processed.')\n  time.sleep(2)\n  video_file = genai.get_file(video_file.name)\nprint(f'Video processing complete: {video_file.uri}')",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "#video_file",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "#video_file = genai.upload_file(path=path_to_video_file)\n# Wait for the file to finish processing\n'''\nwhile video_file.state.name == 'PROCESSING':\n  print('Waiting for video to be processed.')\n  time.sleep(2)\n  video_file = genai.get_file(video_file.name)\nprint(f'Video processing complete: {video_file.uri}')\n'''\n# Create a cache with a 5 minute TTL",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "cache = cache.CachedContent.create(\n    model='models/gemini-1.5-flash-001',\n    display_name='sherlock jr movie', # used to identify the cache\n    system_instruction=(\n        'You are an expert video analyzer, and your job is to answer '\n        'the user\\'s query based on the video file you have access to.'\n    ),\n    contents=\"Hello\",\n    ttl=datetime.timedelta(minutes=5),\n)",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "model = genai.GenerativeModel.from_cached_content(cached_content=cache)\n# Query the model\nresponse = model.generate_content([(\n    'Introduce different characters in the movie by describing '\n    'their personality, looks, and names. Also list the timestamps '\n    'they were introduced for the first time.')])\nprint(response.usage_metadata)\n# The output should look something like this:\n#\n# prompt_token_count: 696219",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "response = model.generate_content([(\n    'Introduce different characters in the movie by describing '\n    'their personality, looks, and names. Also list the timestamps '\n    'they were introduced for the first time.')])\nprint(response.usage_metadata)\n# The output should look something like this:\n#\n# prompt_token_count: 696219\n# cached_content_token_count: 696190\n# candidates_token_count: 214",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "Speak",
        "kind": 2,
        "importPath": "Tests.test1",
        "description": "Tests.test1",
        "peekOfCode": "def Speak(text):\n    engine.say(text)\n    engine.runAndWait()\nSpeak(\"Okay buddy, opening chrome, insta, twitter, amazon, pw.com, word, excel, trello, slides, and powerpoint for you. Anything else you need, just let me know!\")\nwebbrowser.open(\"https://www.google.com/chrome/\")\nwebbrowser.open(\"https://www.instagram.com/\")\nwebbrowser.open(\"https://twitter.com/\")\nwebbrowser.open(\"https://www.amazon.in/\")\nwebbrowser.open(\"https://pw.live/\")\nwebbrowser.open(\"https://www.microsoft.com/en-in/microsoft-365/word\")",
        "detail": "Tests.test1",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Tests.test1",
        "description": "Tests.test1",
        "peekOfCode": "engine = pyttsx3.init()\n# Define the Speak function\ndef Speak(text):\n    engine.say(text)\n    engine.runAndWait()\nSpeak(\"Okay buddy, opening chrome, insta, twitter, amazon, pw.com, word, excel, trello, slides, and powerpoint for you. Anything else you need, just let me know!\")\nwebbrowser.open(\"https://www.google.com/chrome/\")\nwebbrowser.open(\"https://www.instagram.com/\")\nwebbrowser.open(\"https://twitter.com/\")\nwebbrowser.open(\"https://www.amazon.in/\")",
        "detail": "Tests.test1",
        "documentation": {}
    },
    {
        "label": "Speak1",
        "kind": 2,
        "importPath": "Utils.RunTTS",
        "description": "Utils.RunTTS",
        "peekOfCode": "def Speak1(text):\n  if text == \"\": return\n  command = f'edge-tts --voice \"en-US-SteffanNeural\" --text \"{text}\" --write-media \"{os.getcwd()}\\\\Assets\\\\Audio\\\\TTS.mp3\" --write-subtitles \"{os.getcwd()}\\\\Database\\\\Speak\\\\Subtitles.vtt\"'\n  os.system(command)\n  playsound(\"Assets/Audio/TTS.mp3\")\n# Offline\ndef Speak2(text):  \n  Model.say(text)\n  print(f\"Jarvis : {text}\")\n  Model.runAndWait()",
        "detail": "Utils.RunTTS",
        "documentation": {}
    },
    {
        "label": "Speak2",
        "kind": 2,
        "importPath": "Utils.RunTTS",
        "description": "Utils.RunTTS",
        "peekOfCode": "def Speak2(text):  \n  Model.say(text)\n  print(f\"Jarvis : {text}\")\n  Model.runAndWait()\ndef RunTTS(text):\n  try: Speak1(text) \n  except: Speak2(text)\nwith open('Database//Speak//Speak.txt', 'r') as file:\n  contents = file.read()\n  RunTTS(contents)",
        "detail": "Utils.RunTTS",
        "documentation": {}
    },
    {
        "label": "RunTTS",
        "kind": 2,
        "importPath": "Utils.RunTTS",
        "description": "Utils.RunTTS",
        "peekOfCode": "def RunTTS(text):\n  try: Speak1(text) \n  except: Speak2(text)\nwith open('Database//Speak//Speak.txt', 'r') as file:\n  contents = file.read()\n  RunTTS(contents)\n#? Author - Arnav Singh (https://github.com/Arnav3241)",
        "detail": "Utils.RunTTS",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 5,
        "importPath": "Utils.RunTTS",
        "description": "Utils.RunTTS",
        "peekOfCode": "Model = pyttsx3.init('sapi5')\nModel.setProperty('rate', 180)\n# Online\ndef Speak1(text):\n  if text == \"\": return\n  command = f'edge-tts --voice \"en-US-SteffanNeural\" --text \"{text}\" --write-media \"{os.getcwd()}\\\\Assets\\\\Audio\\\\TTS.mp3\" --write-subtitles \"{os.getcwd()}\\\\Database\\\\Speak\\\\Subtitles.vtt\"'\n  os.system(command)\n  playsound(\"Assets/Audio/TTS.mp3\")\n# Offline\ndef Speak2(text):  ",
        "detail": "Utils.RunTTS",
        "documentation": {}
    }
]