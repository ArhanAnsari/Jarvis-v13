[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getcwd",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "wikipedia",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wikipedia",
        "description": "wikipedia",
        "detail": "wikipedia",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "eel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "eel",
        "description": "eel",
        "detail": "eel",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 2,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "def Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:\n    return None\nprompt_general_instuctions = f\"\"\"\nYou are Jarvis, an AI model that has been created for the convenience of the user by Arnav Singh (https://github.com/Arnav3241) and Avi Sinha (https://github.com/Avi0981). ",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "addHistory",
        "kind": 2,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "def addHistory(index, input_, output_):\n  if __name__ == \"__main__\": time.sleep(1) \n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  #print(type(json_obj[str(index)][\"history\"]))\n  while len(json_obj[str(index)][\"history\"]) >= MAX_HIST:\n    json_obj[str(index)][\"history\"].pop(0)\n  json_obj[str(index)][\"history\"].append({\"input\": str(input_), \"output\": str(output_)})\n  with open('Database//History//history.json', 'w') as f:\n    json_str = json.dumps(json_obj)",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "updateName",
        "kind": 2,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "def updateName(index, name):\n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  json_obj[str(index)][\"name\"] = str(name)\n  json_str = json.dumps(json_obj)\n  with open('Database//History//history.json', 'w') as f:\n    f.write(json_str)\ndef Response(input):  \n  input = input.lower()\n  global Cache",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 2,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "def Response(input):  \n  input = input.lower()\n  global Cache\n  if os.path.exists(file):\n    with open(file, 'r') as fData: \n      Cache = json.load(fData)\n      if Cache == \"\": Cache = {}\n  else: Cache = []\n  # for element in Cache:\n  #   if element[\"input\"] == input:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "Cache",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "Cache = []\nfile = r\"Cache/Cache.json\"\n#filter python code for gpt responce\ndef Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "file = r\"Cache/Cache.json\"\n#filter python code for gpt responce\ndef Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:\n    return None",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "prompt_general_instuctions",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "prompt_general_instuctions = f\"\"\"\nYou are Jarvis, an AI model that has been created for the convenience of the user by Arnav Singh (https://github.com/Arnav3241) and Avi Sinha (https://github.com/Avi0981). \nYour job is to act as the brain of AI and perform various tasks which will be instructed how to do so later below.\nYou can respond only in the form of code. No text is allowed.\nOnly Python Language is allowed. Only a single piece of code is allowed which can be ran by pasting it in a python file.\nNOTE: If you want to say something to te user, you can not use the print() function. Instead you need to use the use the Speak function. It can be used directly by entering text into it. It;s syntax is given below:\nSpeak(\"Hello, I am Jarvis. How can I help you?\")\nNOTE: If there are multiple taskes given at once by the user and one of the tasks requires a query from the user, then ask it at the end after complting the other queries. If you have queries regarding multple commands just say it at the end in brief that wat all info do you need for the next time.\nNOTE: For Educational Conversations, explain concepts clearly and thoroughly. Use simple language and offer additional help if needed. Make sure to give examples.\nNOTE: In case of creative conversations, be imaginative and engaging. Use descriptive language and encourage user participation.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "prompt_capabilities",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "prompt_capabilities = f\"\"\"\nThese are the functions you can use in the code:\n\"\"\"\nprompt_history = f\"\"\"\n\"\"\"\nprompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "prompt_history",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "prompt_history = f\"\"\"\n\"\"\"\nprompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.\n# Dare not use any input function. If you want to ask something from the user, use the speak function and just directly ask it.\n# The userbase is Indian. So, make sure to use Indian examples and references if used.\n# At no cost you may change the syntax of the output. It is:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "prompt_summary",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "prompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.\n# Dare not use any input function. If you want to ask something from the user, use the speak function and just directly ask it.\n# The userbase is Indian. So, make sure to use Indian examples and references if used.\n# At no cost you may change the syntax of the output. It is:\n```python\n-code-",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "MAX_HIST",
        "kind": 5,
        "importPath": "Chat.response",
        "description": "Chat.response",
        "peekOfCode": "MAX_HIST = 10\ndef addHistory(index, input_, output_):\n  if __name__ == \"__main__\": time.sleep(1) \n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  #print(type(json_obj[str(index)][\"history\"]))\n  while len(json_obj[str(index)][\"history\"]) >= MAX_HIST:\n    json_obj[str(index)][\"history\"].pop(0)\n  json_obj[str(index)][\"history\"].append({\"input\": str(input_), \"output\": str(output_)})\n  with open('Database//History//history.json', 'w') as f:",
        "detail": "Chat.response",
        "documentation": {}
    },
    {
        "label": "ExecuteCode",
        "kind": 2,
        "importPath": "Functions.Execute",
        "description": "Functions.Execute",
        "peekOfCode": "def ExecuteCode(code_str: str) -> None:\n    try:\n        exec(code_str)\n    except Exception as e:\n        print('Error in ExecuteCode function(Execute.py), code contained in input string has wrong syntax OR wrong datatype argument. Error:', e)\n# Test cases\nif __name__ == '__main__':\n    ExecuteCode('print(\"hello world\")')\n    ExecuteCode('print(\"hi\")\\nprint(\"yo\")')\n    ExecuteCode('import math\\nprint(math.sqrt(49))')",
        "detail": "Functions.Execute",
        "documentation": {}
    },
    {
        "label": "Listen",
        "kind": 2,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "def Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":\n      print(f\"You : {text}\")\n      driver.find_element(by=By.ID, value='end').click()\n      return text",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "os.environ['WDM_LOG']",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "os.environ['WDM_LOG'] = '0'\nservice = Service(ChromeDriverManager().install())\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "service = Service(ChromeDriverManager().install())\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "chrome_options",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "chrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "driver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "Functions.Listen",
        "description": "Functions.Listen",
        "peekOfCode": "website = f\"{getcwd()}//Functions//HTML//Listen.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":\n      print(f\"You : {text}\")",
        "detail": "Functions.Listen",
        "documentation": {}
    },
    {
        "label": "Speak",
        "kind": 2,
        "importPath": "Functions.Speak",
        "description": "Functions.Speak",
        "peekOfCode": "def Speak(*args):\n  global process\n  audio = \"\"\n  for i in args:\n    audio += str(i)\n  audio = audio.replace('\"', \"\")\n  audio = audio.replace('*', \"dash \")\n  with open(\"Database//Speak//Speak.txt\", \"w\") as file:\n    file.write(audio)\n    process = subprocess.Popen([\"python\", \"Utils//RunTTS.py\"])",
        "detail": "Functions.Speak",
        "documentation": {}
    },
    {
        "label": "TTSK",
        "kind": 2,
        "importPath": "Functions.Speak",
        "description": "Functions.Speak",
        "peekOfCode": "def TTSK():\n  process.kill()\n  print(\"Speech Process Terminated\")\nif __name__ == \"__main__\":\n  while True:\n    Speak(input(\">>> \"))\n#? Author - Arnav Singh (https://github.com/Arnav3241)",
        "detail": "Functions.Speak",
        "documentation": {}
    },
    {
        "label": "SpeakSync",
        "kind": 2,
        "importPath": "Functions.SpeakSync",
        "description": "Functions.SpeakSync",
        "peekOfCode": "def SpeakSync(*args):\n  global process\n  audio = \"\"\n  for i in args:\n    audio += str(i)\n  audio = audio.replace('\"', \"\")\n  audio = audio.replace('*', \"dash \")\n  with open(\"Database//Speak//Speak.txt\", \"w\") as file:\n    file.write(audio)\n  subprocess.run([\"python\", \"Utils//RunTTS.py\"])",
        "detail": "Functions.SpeakSync",
        "documentation": {}
    },
    {
        "label": "TTSK",
        "kind": 2,
        "importPath": "Functions.SpeakSync",
        "description": "Functions.SpeakSync",
        "peekOfCode": "def TTSK():\n  process.kill()\n  print(\"Speech Process Terminated\")\nif __name__ == \"__main__\":\n  while True:\n    SpeakSync(input(\">>> \"))\n#? Author - Arnav Singh (https://github.com/Arnav3241)",
        "detail": "Functions.SpeakSync",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 2,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "def Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:\n    return None\nprompt_general_instuctions = f\"\"\"\nYou are Jarvis, an AI model that has been created for the convenience of the user by Arnav Singh (https://github.com/Arnav3241) and Avi Sinha (https://github.com/Avi0981). ",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "addHistory",
        "kind": 2,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "def addHistory(index, input_, output_):\n  if __name__ == \"__main__\": time.sleep(1) \n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  #print(type(json_obj[str(index)][\"history\"]))\n  while len(json_obj[str(index)][\"history\"]) >= MAX_HIST:\n    json_obj[str(index)][\"history\"].pop(0)\n  json_obj[str(index)][\"history\"].append({\"input\": str(input_), \"output\": str(output_)})\n  with open('Database//History//history.json', 'w') as f:\n    json_str = json.dumps(json_obj)",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "updateName",
        "kind": 2,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "def updateName(index, name):\n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  json_obj[str(index)][\"name\"] = str(name)\n  json_str = json.dumps(json_obj)\n  with open('Database//History//history.json', 'w') as f:\n    f.write(json_str)\ndef Response(input):  \n  input = input.lower()\n  global Cache",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 2,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "def Response(input):  \n  input = input.lower()\n  global Cache\n  if os.path.exists(file):\n    with open(file, 'r') as fData: \n      Cache = json.load(fData)\n      if Cache == \"\": Cache = {}\n  else: Cache = []\n  # for element in Cache:\n  #   if element[\"input\"] == input:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "Cache",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "Cache = []\nfile = r\"Cache/Cache.json\"\n#filter python code for gpt responce\ndef Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "file = r\"Cache/Cache.json\"\n#filter python code for gpt responce\ndef Filter(txt):\n  pattern = r\"```python(.*?)```\"\n  matches = re.findall(pattern, txt, re.DOTALL)\n  if matches:\n   python_code = matches[0].strip()\n   return python_code\n  else:\n    return None",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "prompt_general_instuctions",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "prompt_general_instuctions = f\"\"\"\nYou are Jarvis, an AI model that has been created for the convenience of the user by Arnav Singh (https://github.com/Arnav3241) and Avi Sinha (https://github.com/Avi0981). \nYour job is to act as the brain of AI and perform various tasks which will be instructed how to do so later below.\nYou can respond only in the form of code. No text is allowed.\nOnly Python Language is allowed. Only a single piece of code is allowed which can be ran by pasting it in a python file.\nNOTE: If you want to say something to te user, you can not use the print() function. Instead you need to use the use the Speak function. It can be used directly by entering text into it. It;s syntax is given below:\nSpeak(\"Hello, I am Jarvis. How can I help you?\")\nNOTE: If there are multiple taskes given at once by the user and one of the tasks requires a query from the user, then ask it at the end after complting the other queries. If you have queries regarding multple commands just say it at the end in brief that wat all info do you need for the next time.\nNOTE: For Educational Conversations, explain concepts clearly and thoroughly. Use simple language and offer additional help if needed. Make sure to give examples.\nNOTE: In case of creative conversations, be imaginative and engaging. Use descriptive language and encourage user participation.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "prompt_capabilities",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "prompt_capabilities = f\"\"\"\nThese are the functions you can use in the code:\n# TODO: <Functions Need to be defined>\n\"\"\"\nprompt_history = f\"\"\"\n\"\"\"\nprompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "prompt_history",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "prompt_history = f\"\"\"\n\"\"\"\nprompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.\n# Dare not use any input function. If you want to ask something from the user, use the speak function and just directly ask it.\n# The userbase is Indian. So, make sure to use Indian examples and references if used.\n# At no cost you may change the syntax of the output. It is:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "prompt_summary",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "prompt_summary = f\"\"\"\n# Dare not write any form of text except for code.\n# Dare not to define the speak function.\n# Dare not the derive known info from the web.\n# Make sure to sound like a cool dude.\n# Dare not use any input function. If you want to ask something from the user, use the speak function and just directly ask it.\n# The userbase is Indian. So, make sure to use Indian examples and references if used.\n# At no cost you may change the syntax of the output. It is:\n```python\n-code-",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "MAX_HIST",
        "kind": 5,
        "importPath": "Tests.1",
        "description": "Tests.1",
        "peekOfCode": "MAX_HIST = 10\ndef addHistory(index, input_, output_):\n  if __name__ == \"__main__\": time.sleep(1) \n  with open('Database//History//history.json', 'r') as f:\n    json_obj = json.loads(f.read())\n  #print(type(json_obj[str(index)][\"history\"]))\n  while len(json_obj[str(index)][\"history\"]) >= MAX_HIST:\n    json_obj[str(index)][\"history\"].pop(0)\n  json_obj[str(index)][\"history\"].append({\"input\": str(input_), \"output\": str(output_)})\n  with open('Database//History//history.json', 'w') as f:",
        "detail": "Tests.1",
        "documentation": {}
    },
    {
        "label": "generation_config",
        "kind": 5,
        "importPath": "Tests.2",
        "description": "Tests.2",
        "peekOfCode": "generation_config = {\n  \"temperature\": 1,\n  \"top_p\": 0.95,\n  \"top_k\": 64,\n  \"max_output_tokens\": 8192,\n  \"response_mime_type\": \"text/plain\",\n}\nmodel = genai.GenerativeModel(\n  model_name=\"gemini-1.5-pro\",\n  generation_config=generation_config,",
        "detail": "Tests.2",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Tests.2",
        "description": "Tests.2",
        "peekOfCode": "model = genai.GenerativeModel(\n  model_name=\"gemini-1.5-pro\",\n  generation_config=generation_config,\n  # safety_settings = Adjust safety settings\n  # See https://ai.google.dev/gemini-api/docs/safety-settings\n)\nchat_session = model.start_chat(\n  history=[\n  ]\n)",
        "detail": "Tests.2",
        "documentation": {}
    },
    {
        "label": "chat_session",
        "kind": 5,
        "importPath": "Tests.2",
        "description": "Tests.2",
        "peekOfCode": "chat_session = model.start_chat(\n  history=[\n  ]\n)\nresponse = chat_session.send_message(\"Hi\")\nprint(response.text)",
        "detail": "Tests.2",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Tests.2",
        "description": "Tests.2",
        "peekOfCode": "response = chat_session.send_message(\"Hi\")\nprint(response.text)",
        "detail": "Tests.2",
        "documentation": {}
    },
    {
        "label": "#path_to_video_file",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "#path_to_video_file = 'Sherlock_Jr_FullMovie.mp4'\n# Upload the video using the Files API\n#video_file = genai.upload_file(path=path_to_video_file)\n# Wait for the file to finish processing\n'''\nwhile video_file.state.name == 'PROCESSING':\n  print('Waiting for video to be processed.')\n  time.sleep(2)\n  video_file = genai.get_file(video_file.name)\nprint(f'Video processing complete: {video_file.uri}')",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "#video_file",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "#video_file = genai.upload_file(path=path_to_video_file)\n# Wait for the file to finish processing\n'''\nwhile video_file.state.name == 'PROCESSING':\n  print('Waiting for video to be processed.')\n  time.sleep(2)\n  video_file = genai.get_file(video_file.name)\nprint(f'Video processing complete: {video_file.uri}')\n'''\n# Create a cache with a 5 minute TTL",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "cache = cache.CachedContent.create(\n    model='models/gemini-1.5-flash-001',\n    display_name='sherlock jr movie', # used to identify the cache\n    system_instruction=(\n        'You are an expert video analyzer, and your job is to answer '\n        'the user\\'s query based on the video file you have access to.'\n    ),\n    contents=\"Hello\",\n    ttl=datetime.timedelta(minutes=5),\n)",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "model = genai.GenerativeModel.from_cached_content(cached_content=cache)\n# Query the model\nresponse = model.generate_content([(\n    'Introduce different characters in the movie by describing '\n    'their personality, looks, and names. Also list the timestamps '\n    'they were introduced for the first time.')])\nprint(response.usage_metadata)\n# The output should look something like this:\n#\n# prompt_token_count: 696219",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Tests.test",
        "description": "Tests.test",
        "peekOfCode": "response = model.generate_content([(\n    'Introduce different characters in the movie by describing '\n    'their personality, looks, and names. Also list the timestamps '\n    'they were introduced for the first time.')])\nprint(response.usage_metadata)\n# The output should look something like this:\n#\n# prompt_token_count: 696219\n# cached_content_token_count: 696190\n# candidates_token_count: 214",
        "detail": "Tests.test",
        "documentation": {}
    },
    {
        "label": "Speak",
        "kind": 2,
        "importPath": "Tests.test1",
        "description": "Tests.test1",
        "peekOfCode": "def Speak(text):\n    engine.say(text)\n    engine.runAndWait()\nSpeak(\"Okay buddy, opening chrome, insta, twitter, amazon, pw.com, word, excel, trello, slides, and powerpoint for you. Anything else you need, just let me know!\")\nwebbrowser.open(\"https://www.google.com/chrome/\")\nwebbrowser.open(\"https://www.instagram.com/\")\nwebbrowser.open(\"https://twitter.com/\")\nwebbrowser.open(\"https://www.amazon.in/\")\nwebbrowser.open(\"https://pw.live/\")\nwebbrowser.open(\"https://www.microsoft.com/en-in/microsoft-365/word\")",
        "detail": "Tests.test1",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Tests.test1",
        "description": "Tests.test1",
        "peekOfCode": "engine = pyttsx3.init()\n# Define the Speak function\ndef Speak(text):\n    engine.say(text)\n    engine.runAndWait()\nSpeak(\"Okay buddy, opening chrome, insta, twitter, amazon, pw.com, word, excel, trello, slides, and powerpoint for you. Anything else you need, just let me know!\")\nwebbrowser.open(\"https://www.google.com/chrome/\")\nwebbrowser.open(\"https://www.instagram.com/\")\nwebbrowser.open(\"https://twitter.com/\")\nwebbrowser.open(\"https://www.amazon.in/\")",
        "detail": "Tests.test1",
        "documentation": {}
    },
    {
        "label": "Speak1",
        "kind": 2,
        "importPath": "Utils.RunTTS",
        "description": "Utils.RunTTS",
        "peekOfCode": "def Speak1(text):\n  if text == \"\": return\n  command = f'edge-tts --voice \"en-US-SteffanNeural\" --text \"{text}\" --write-media \"{os.getcwd()}\\\\Assets\\\\Audio\\\\TTS.mp3\" --write-subtitles \"{os.getcwd()}\\\\Database\\\\Speak\\\\Subtitles.vtt\"'\n  os.system(command)\n  playsound(\"Assets/Audio/TTS.mp3\")\n# Offline\ndef Speak2(text):  \n  Model.say(text)\n  print(f\"Jarvis : {text}\")\n  Model.runAndWait()",
        "detail": "Utils.RunTTS",
        "documentation": {}
    },
    {
        "label": "Speak2",
        "kind": 2,
        "importPath": "Utils.RunTTS",
        "description": "Utils.RunTTS",
        "peekOfCode": "def Speak2(text):  \n  Model.say(text)\n  print(f\"Jarvis : {text}\")\n  Model.runAndWait()\ndef RunTTS(text):\n  try: Speak1(text) \n  except: Speak2(text)\nwith open('Database//Speak//Speak.txt', 'r') as file:\n  contents = file.read()\n  RunTTS(contents)",
        "detail": "Utils.RunTTS",
        "documentation": {}
    },
    {
        "label": "RunTTS",
        "kind": 2,
        "importPath": "Utils.RunTTS",
        "description": "Utils.RunTTS",
        "peekOfCode": "def RunTTS(text):\n  try: Speak1(text) \n  except: Speak2(text)\nwith open('Database//Speak//Speak.txt', 'r') as file:\n  contents = file.read()\n  RunTTS(contents)\n#? Author - Arnav Singh (https://github.com/Arnav3241)",
        "detail": "Utils.RunTTS",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 5,
        "importPath": "Utils.RunTTS",
        "description": "Utils.RunTTS",
        "peekOfCode": "Model = pyttsx3.init('sapi5')\nModel.setProperty('rate', 180)\n# Online\ndef Speak1(text):\n  if text == \"\": return\n  command = f'edge-tts --voice \"en-US-SteffanNeural\" --text \"{text}\" --write-media \"{os.getcwd()}\\\\Assets\\\\Audio\\\\TTS.mp3\" --write-subtitles \"{os.getcwd()}\\\\Database\\\\Speak\\\\Subtitles.vtt\"'\n  os.system(command)\n  playsound(\"Assets/Audio/TTS.mp3\")\n# Offline\ndef Speak2(text):  ",
        "detail": "Utils.RunTTS",
        "documentation": {}
    }
]